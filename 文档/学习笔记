//学习使用jpa默认的findById
Optional<User> userw = userRepository.findById(1L);
if(userw.isPresent()){//判空
    User user = userw.get();//得到返回的实体
}

//返回报文的填充实例
User user = new User();
ArrayList<String> list = new ArrayList();
list.add("潘成花");
return RestResponse.ok(user).list(list).msg("跨域成功");

//jpa利用save实现更新
save
通过save更新时，需要指定id来实现单条记录的修改 实际操作见UserTest
Optional<User> op = userRepository.findById(1L);
if(op.isPresent()){//不为空才进来
    User user = op.get();
    user.setUsername("花花2号");
    User save = userRepository.save(user);
    log.info(":{} --PCH", JSON.toJSONString(save));
}

//解决springdatajpa设置默认值保存null无效的问题 在实体类上面加这个两个注解即可。
@DynamicUpdate
@DynamicInsert


//在JPA中，我们可以使用@Version在某个字段上进行乐观锁控制。

//JPA的连表查询建议使用sql查询
    /**
     * 查询发给某个人的所有消息
     *  联表查询实例
     *  nativeQuery = true配置查询方式，true表示Sql查询，false表示Jpql查询
     *  注意：（注：存储过程不能select * ）
     */
    @Query(value = "select user.id,username from user inner join message on user.id = message.to_user_id and user.id = :id ",nativeQuery = true)
    List<Object> findSql(@Param("id")Long id);


//        return userRepository.getOne(id);
//getOne是懒加载，需要增加这个配置： spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true，但这种方式不太友好，建议不要使用。
//每次初始化一个实体的关联就会创建一个临时的session来加载，每个临时的session都会获取一个临时的数据库连接，开启一个新的事物。这就导致对底层连接池压力很大，而且事物日志也会被每次flush.
//设想一下：假如我们查询了一个分页list每次查出1000条，这个实体有三个lazy关联对象,那么，恭喜你，你至少需要创建3000个临时session+connection+transaction.